// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generating files using @elodin/generator-reason-fela should add reset class names 1`] = `
Object {
  "StyleButton.elo.css": "._fjfhc0 {
  padding-left: 10px
}

@media (min-width: 1024px) {
  ._fjfhc0 {
    padding-left: 20px
  }
}

._fjfhc0_0-0 {
  padding-top: 10px
}",
  "StyleButtonText.elo.css": "._7hpvwv {
  color: red
}",
  "StyleStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[%bs.raw {| import(\\"./StyleButton.elo.css\\") |}];
[%bs.raw {| import(\\"./StyleButtonText.elo.css\\") |}];

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let getButtonVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\" _fjfhc0_0-0\\"
    | (Some(Light)) => \\"\\"
    | (None) => \\"\\"
  }
};

let button = (~right=?, ~bottom=?, ~mode=?, ()) => {
  style({
    \\"_className\\": \\"view _fjfhc0\\" ++ getButtonVariants(~mode, ()),
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonText = () => {
  style({
    \\"_className\\": \\"text _7hpvwv\\",
  })
};",
}
`;

exports[`Generating files using @elodin/generator-reason-fela should generate css files for each style and a single reason file 1`] = `
Object {
  "StyleButton.elo.css": "._fjfhc0 {
  padding-left: 10px
}

@media (min-width: 1024px) {
  ._fjfhc0 {
    padding-left: 20px
  }
}

._fjfhc0_0-0 {
  padding-top: 10px
}",
  "StyleButtonText.elo.css": "._7hpvwv {
  color: red
}",
  "StyleStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[%bs.raw {| import(\\"./StyleButton.elo.css\\") |}];
[%bs.raw {| import(\\"./StyleButtonText.elo.css\\") |}];

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let getButtonVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\" _fjfhc0_0-0\\"
    | (Some(Light)) => \\"\\"
    | (None) => \\"\\"
  }
};

let button = (~right=?, ~bottom=?, ~mode=?, ()) => {
  style({
    \\"_className\\": \\"_fjfhc0\\" ++ getButtonVariants(~mode, ()),
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonText = () => {
  style({
    \\"_className\\": \\"_7hpvwv\\",
  })
};",
}
`;

exports[`Generating files using @elodin/generator-reason-fela should generate readable classnames in devMode 1`] = `
Object {
  "StyleButton.elo.css": ".Button_fjfhc0 {
  padding-left: 10px
}

@media (min-width: 1024px) {
  .Button_fjfhc0 {
    padding-left: 20px
  }
}

.Button_fjfhc0__Mode-Dark {
  padding-top: 10px
}",
  "StyleButtonText.elo.css": ".ButtonText_7hpvwv {
  color: red
}",
  "StyleStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[%bs.raw {| import(\\"./StyleButton.elo.css\\") |}];
[%bs.raw {| import(\\"./StyleButtonText.elo.css\\") |}];

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let getButtonVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\" Button_fjfhc0__Mode-Dark\\"
    | (Some(Light)) => \\"\\"
    | (None) => \\"\\"
  }
};

let button = (~right=?, ~bottom=?, ~mode=?, ()) => {
  style({
    \\"_className\\": \\"Button_fjfhc0\\" ++ getButtonVariants(~mode, ()),
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonText = () => {
  style({
    \\"_className\\": \\"ButtonText_7hpvwv\\",
  })
};",
}
`;

exports[`Generating files using @elodin/generator-reason-fela should only generate a reason file 1`] = `
Object {
  "StyleStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let button = (~right=?, ~bottom=?, ~mode=?, ()) => {
  style({
    \\"paddingLeft\\": \\"10px\\",
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingLeft\\": \\"20px\\",
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingTop\\": \\"10px\\",
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonText = () => {
  style({
    \\"color\\": \\"red\\",
  })
};",
}
`;

exports[`Generating files using @elodin/generator-reason-fela should only generate a reason file with baseClassName 1`] = `
Object {
  "StyleStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let button = (~right=?, ~bottom=?, ~mode=?, ()) => {
  style({
    \\"_className\\": \\"view\\",
    \\"paddingLeft\\": \\"10px\\",
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingLeft\\": \\"20px\\",
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingTop\\": \\"10px\\",
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonText = () => {
  style({
    \\"_className\\": \\"text\\",
    \\"color\\": \\"red\\",
  })
};",
}
`;

exports[`Generating files using @elodin/generator-reason-fela should use a custom style name 1`] = `
Object {
  "StyleButton.elo.css": "._fjfhc0 {
  padding-left: 10px
}

@media (min-width: 1024px) {
  ._fjfhc0 {
    padding-left: 20px
  }
}

._fjfhc0_0-0 {
  padding-top: 10px
}",
  "StyleButtonText.elo.css": "._7hpvwv {
  color: red
}",
  "StyleStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[%bs.raw {| import(\\"./StyleButton.elo.css\\") |}];
[%bs.raw {| import(\\"./StyleButtonText.elo.css\\") |}];

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let getButtonVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\" _fjfhc0_0-0\\"
    | (Some(Light)) => \\"\\"
    | (None) => \\"\\"
  }
};

let buttonStyle = (~right=?, ~bottom=?, ~mode=?, ()) => {
  style({
    \\"_className\\": \\"_fjfhc0\\" ++ getButtonVariants(~mode, ()),
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonTextStyle = () => {
  style({
    \\"_className\\": \\"_7hpvwv\\",
  })
};",
}
`;

exports[`Generating files using @elodin/generator-reason-fela should use custom css file names 1`] = `
Object {
  "STYLEbutton.elo.css": "._fjfhc0 {
  padding-left: 10px
}

@media (min-width: 1024px) {
  ._fjfhc0 {
    padding-left: 20px
  }
}

._fjfhc0_0-0 {
  padding-top: 10px
}",
  "STYLEbuttontext.elo.css": "._7hpvwv {
  color: red
}",
  "StyleStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[%bs.raw {| import(\\"./STYLEbutton.elo.css\\") |}];
[%bs.raw {| import(\\"./STYLEbuttontext.elo.css\\") |}];

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let getButtonVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\" _fjfhc0_0-0\\"
    | (Some(Light)) => \\"\\"
    | (None) => \\"\\"
  }
};

let button = (~right=?, ~bottom=?, ~mode=?, ()) => {
  style({
    \\"_className\\": \\"_fjfhc0\\" ++ getButtonVariants(~mode, ()),
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonText = () => {
  style({
    \\"_className\\": \\"_7hpvwv\\",
  })
};",
}
`;

exports[`Generating files using @elodin/generator-reason-fela should use custom reason file names 1`] = `
Object {
  "ElodinStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[%bs.raw {| import(\\"./StyleButton.elo.css\\") |}];
[%bs.raw {| import(\\"./StyleButtonText.elo.css\\") |}];

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let getButtonVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\" _fjfhc0_0-0\\"
    | (Some(Light)) => \\"\\"
    | (None) => \\"\\"
  }
};

let button = (~right=?, ~bottom=?, ~mode=?, ()) => {
  style({
    \\"_className\\": \\"_fjfhc0\\" ++ getButtonVariants(~mode, ()),
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonText = () => {
  style({
    \\"_className\\": \\"_7hpvwv\\",
  })
};",
  "StyleButton.elo.css": "._fjfhc0 {
  padding-left: 10px
}

@media (min-width: 1024px) {
  ._fjfhc0 {
    padding-left: 20px
  }
}

._fjfhc0_0-0 {
  padding-top: 10px
}",
  "StyleButtonText.elo.css": "._7hpvwv {
  color: red
}",
}
`;

exports[`Generating files using @elodin/generator-reason-fela should use dynamic imports 1`] = `
Object {
  "StyleButton.elo.css": "._fjfhc0 {
  padding-left: 10px
}

@media (min-width: 1024px) {
  ._fjfhc0 {
    padding-left: 20px
  }
}

._fjfhc0_0-0 {
  padding-top: 10px
}",
  "StyleButtonText.elo.css": "._7hpvwv {
  color: red
}",
  "StyleStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let getButtonVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\" _fjfhc0_0-0\\"
    | (Some(Light)) => \\"\\"
    | (None) => \\"\\"
  }
};

let button = (~right=?, ~bottom=?, ~mode=?, ()) => {
  [%bs.raw {| import(\\"./StyleButton.elo.css\\") |}];

  style({
    \\"_className\\": \\"_fjfhc0\\" ++ getButtonVariants(~mode, ()),
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonText = () => {
  [%bs.raw {| import(\\"./StyleButtonText.elo.css\\") |}];

  style({
    \\"_className\\": \\"_7hpvwv\\",
  })
};",
}
`;

exports[`Generating files using @elodin/generator-reason-fela should work with all options combined 1`] = `
Object {
  "ElodinStyle.re": "open Fela;

type extend;
external extend: Js.t('a) => extend = \\"%identity\\";

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light;

let getButtonVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\" Button_fjfhc0__Mode-Dark\\"
    | (Some(Light)) => \\"\\"
    | (None) => \\"\\"
  }
};

let button = (~right=?, ~bottom=?, ~mode=?, ()) => {
  [%bs.raw {| import(\\"./STYLEbutton.elo.css\\") |}];

  style({
    \\"_className\\": \\"view Button_fjfhc0\\" ++ getButtonVariants(~mode, ()),
    \\"paddingRight\\": right,
    \\"@media (min-width: 1024px)\\": {
      \\"paddingRight\\": right,
    },
    \\"extend\\": [|{
      \\"condition\\": mode === Some(Dark),
      \\"style\\": extend({
        \\"paddingBottom\\": bottom,
      }),
    }|],
  })
};

let buttonText = () => {
  [%bs.raw {| import(\\"./STYLEbuttontext.elo.css\\") |}];

  style({
    \\"_className\\": \\"text ButtonText_7hpvwv\\",
  })
};",
  "STYLEbutton.elo.css": ".Button_fjfhc0 {
  padding-left: 10px
}

@media (min-width: 1024px) {
  .Button_fjfhc0 {
    padding-left: 20px
  }
}

.Button_fjfhc0__Mode-Dark {
  padding-top: 10px
}",
  "STYLEbuttontext.elo.css": ".ButtonText_7hpvwv {
  color: red
}",
}
`;
