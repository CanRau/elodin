// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compiling to ReasonML should return a map of files 1`] = `
Object {
  "RootStyle.re": "[%bs.raw {|
  require(\\"./RootStyleButton.elo.css\\")
|}];

[%bs.raw {|
  require(\\"./RootStyleLabel.elo.css\\")
|}];

open Css;

[@bs.deriving jsConverter]
type type =
  | Primary
  | Secondary

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light
  | Semi

let buttonStyle = (~borderWidth:string) => style([unsafe(\\"border-width\\", borderWidth)])
let getButtonStyleVariants = (~borderWidth:string, ~type, ~mode, ()) => {
    let buttonStylePrimary = style([unsafe(\\"padding-left\\", paddingLeft),
      hover([unsafe(\\"padding-right\\", paddingRight)])]);
    let buttonStylePrimaryDark = style([unsafe(\\"padding-left\\", padLeft)]);

switch (type, mode) {
    | (Some(Primary), Some(Dark)) => [buttonStylePrimary,buttonStylePrimaryDark]
    | (Some(Primary), Some(Light)) => [buttonStylePrimary]
    | (Some(Primary), Some(Semi)) => [buttonStylePrimary]
    | (Some(Primary), None) => [buttonStylePrimary]
    | (Some(Secondary), Some(Dark)) => []
    | (Some(Secondary), Some(Light)) => []
    | (Some(Secondary), Some(Semi)) => []
    | (Some(Secondary), None) => []
    | (None, Some(Dark)) => []
    | (None, Some(Light)) => []
    | (None, Some(Semi)) => []
    | (None, None) => []
    }
  }

let getButtonVariants = (~type, ~mode, ()) => {
  switch (type, mode) {
    | (Some(Primary), Some(Dark)) => \\"_1lkzl71__Type-Primary _1lkzl71__Mode-Dark _1lkzl71__Type-Primary__Mode-Dark\\"
    | (Some(Primary), Some(Light)) => \\"_1lkzl71__Type-Primary _1lkzl71__Mode-Light _1lkzl71__Type-Primary__Mode-Light\\"
    | (Some(Primary), Some(Semi)) => \\"_1lkzl71__Type-Primary _1lkzl71__Mode-Semi _1lkzl71__Type-Primary__Mode-Semi\\"
    | (Some(Primary), None) => \\"_1lkzl71__Type-Primary\\"
    | (Some(Secondary), Some(Dark)) => \\"_1lkzl71__Type-Secondary _1lkzl71__Mode-Dark _1lkzl71__Type-Secondary__Mode-Dark\\"
    | (Some(Secondary), Some(Light)) => \\"_1lkzl71__Type-Secondary _1lkzl71__Mode-Light _1lkzl71__Type-Secondary__Mode-Light\\"
    | (Some(Secondary), Some(Semi)) => \\"_1lkzl71__Type-Secondary _1lkzl71__Mode-Semi _1lkzl71__Type-Secondary__Mode-Semi\\"
    | (Some(Secondary), None) => \\"_1lkzl71__Type-Secondary\\"
    | (None, Some(Dark)) => \\"_1lkzl71__Mode-Dark\\"
    | (None, Some(Light)) => \\"_1lkzl71__Mode-Light\\"
    | (None, Some(Semi)) => \\"_1lkzl71__Mode-Semi\\"
    | (None, None) => \\"_1lkzl71\\"
  }
}

let button = (~borderWidth:string, ~type=?, ~mode=?, ()) => \\"_elo_view _1lkzl71\\" ++ \\" \\" ++ getButtonVariants(~type, ~mode, ()) ++ \\" \\" ++ merge([buttonStyle(~borderWidth), ...getButtonStyleVariants(~borderWidth, ~type, ~mode, ())])

let labelStyle = (~lineHeight:string, ~fontSize:string, ~mediaFontSize:string, ~mediaHoverFontSize:string) => style([unsafe(\\"line-height\\", lineHeight),
    hover([unsafe(\\"font-size\\", fontSize)]),
    media(\\"(min-width: 320px) and (max-width: 320px)\\", [unsafe(\\"font-size\\", mediaFontSize),
hover([unsafe(\\"font-size\\", mediaHoverFontSize)])])])
let getLabelStyleVariants = (~lineHeight:string, ~fontSize:string, ~mediaFontSize:string, ~mediaHoverFontSize:string, ~type, ~mode, ()) => {
    switch (type, mode) {
    | (Some(Primary), Some(Dark)) => []
    | (Some(Primary), Some(Light)) => []
    | (Some(Primary), Some(Semi)) => []
    | (Some(Primary), None) => []
    | (Some(Secondary), Some(Dark)) => []
    | (Some(Secondary), Some(Light)) => []
    | (Some(Secondary), Some(Semi)) => []
    | (Some(Secondary), None) => []
    | (None, Some(Dark)) => []
    | (None, Some(Light)) => []
    | (None, Some(Semi)) => []
    | (None, None) => []
    }
  }

let getLabelVariants = (~type, ~mode, ()) => {
  switch (type, mode) {
    | (Some(Primary), Some(Dark)) => \\"_vqhb4f__Type-Primary _vqhb4f__Mode-Dark _vqhb4f__Type-Primary__Mode-Dark\\"
    | (Some(Primary), Some(Light)) => \\"_vqhb4f__Type-Primary _vqhb4f__Mode-Light _vqhb4f__Type-Primary__Mode-Light\\"
    | (Some(Primary), Some(Semi)) => \\"_vqhb4f__Type-Primary _vqhb4f__Mode-Semi _vqhb4f__Type-Primary__Mode-Semi\\"
    | (Some(Primary), None) => \\"_vqhb4f__Type-Primary\\"
    | (Some(Secondary), Some(Dark)) => \\"_vqhb4f__Type-Secondary _vqhb4f__Mode-Dark _vqhb4f__Type-Secondary__Mode-Dark\\"
    | (Some(Secondary), Some(Light)) => \\"_vqhb4f__Type-Secondary _vqhb4f__Mode-Light _vqhb4f__Type-Secondary__Mode-Light\\"
    | (Some(Secondary), Some(Semi)) => \\"_vqhb4f__Type-Secondary _vqhb4f__Mode-Semi _vqhb4f__Type-Secondary__Mode-Semi\\"
    | (Some(Secondary), None) => \\"_vqhb4f__Type-Secondary\\"
    | (None, Some(Dark)) => \\"_vqhb4f__Mode-Dark\\"
    | (None, Some(Light)) => \\"_vqhb4f__Mode-Light\\"
    | (None, Some(Semi)) => \\"_vqhb4f__Mode-Semi\\"
    | (None, None) => \\"_vqhb4f\\"
  }
}

let label = (~lineHeight:string, ~fontSize:string, ~mediaFontSize:string, ~mediaHoverFontSize:string, ~type=?, ~mode=?, ()) => \\"_elo_text _vqhb4f\\" ++ \\" \\" ++ getLabelVariants(~type, ~mode, ()) ++ \\" \\" ++ merge([labelStyle(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize), ...getLabelStyleVariants(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~type, ~mode, ())])
",
  "RootStyleButton.elo.css": "._1lkzl71 {
  background-color: red;
  padding-left: 10px;
  border: 0px
}

._1lkzl71__Type-Primary {
  background-color: red
}

._1lkzl71__Type-Primary:hover {
  padding-left: 10px
}

._1lkzl71__Type-Primary__Mode-Dark {
  background-color: blue
}

._1lkzl71__Mode-Light {
  background-color: green
}",
  "RootStyleLabel.elo.css": "._vqhb4f:hover {
  color: red
}

@media (min-width: 320px) and (max-width: 320px) {
  ._vqhb4f {
    color: green
  }
}

@media (min-width: 320px) and (max-width: 320px) {
  ._vqhb4f:hover {
    color: blue
  }
}",
}
`;
