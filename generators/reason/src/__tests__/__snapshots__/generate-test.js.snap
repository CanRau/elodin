// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Compiling to ReasonML should return a map of files 1`] = `
Object {
  "RootStyle.re": "open Css;
[%bs.raw {|
  require(\\"./RootStyleButton.elo.css\\")
|}];

[%bs.raw {|
  require(\\"./RootStyleLabel.elo.css\\")
|}];

[%bs.raw{|
  require(\\"./_reset.elo.css\\")
|}];

[@bs.deriving jsConverter]
type type_ =
  | Primary
  | Secondary;

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light
  | Semi;

let buttonStyle = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft) => style([unsafe(\\"border-width\\", borderWidth)]);
let getButtonStyleVariants = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_, ~mode, ()) => {
    let buttonStylePrimary = style([unsafe(\\"padding-left\\", paddingLeft),
      hover([unsafe(\\"padding-right\\", paddingRight)])]);
    let buttonStylePrimaryDark = style([unsafe(\\"padding-left\\", padLeft)]);

switch (type_, mode) {
    | (Some(Primary), Some(Dark)) => [buttonStylePrimary,buttonStylePrimaryDark]
    | (Some(Primary), Some(Light)) => [buttonStylePrimary]
    | (Some(Primary), Some(Semi)) => [buttonStylePrimary]
    | (Some(Primary), None) => [buttonStylePrimary]
    | (Some(Secondary), Some(Dark)) => []
    | (Some(Secondary), Some(Light)) => []
    | (Some(Secondary), Some(Semi)) => []
    | (Some(Secondary), None) => []
    | (None, Some(Dark)) => []
    | (None, Some(Light)) => []
    | (None, Some(Semi)) => []
    | (None, None) => []
    }
  };

let getButtonVariants = (~type_, ~mode, ()) => {
  switch (type_, mode) {
    | (Some(Primary), Some(Dark)) => \\" _333se4_0-0 _333se4_1-0 _333se4_0-0_1-0\\"
    | (Some(Primary), Some(Light)) => \\" _333se4_0-0 _333se4_1-1 _333se4_0-0_1-1\\"
    | (Some(Primary), Some(Semi)) => \\" _333se4_0-0 _333se4_1-2 _333se4_0-0_1-2\\"
    | (Some(Primary), None) => \\" _333se4_0-0\\"
    | (Some(Secondary), Some(Dark)) => \\" _333se4_0-1 _333se4_1-0 _333se4_0-1_1-0\\"
    | (Some(Secondary), Some(Light)) => \\" _333se4_0-1 _333se4_1-1 _333se4_0-1_1-1\\"
    | (Some(Secondary), Some(Semi)) => \\"\\"
    | (Some(Secondary), None) => \\" _333se4_0-1\\"
    | (None, Some(Dark)) => \\" _333se4_1-0\\"
    | (None, Some(Light)) => \\" _333se4_1-1\\"
    | (None, Some(Semi)) => \\" _333se4_1-2\\"
    | (None, None) => \\"\\"
  }
};

let button = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_=?, ~mode=?, ()) => {
  \\"_elo_view _333se4\\" ++ getButtonVariants(~type_, ~mode, ()) ++ \\" \\" ++ merge([buttonStyle(~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft), ...getButtonStyleVariants(~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_, ~mode, ())]);
}

let labelStyle = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize) => style([unsafe(\\"line-height\\", lineHeight),
    hover([unsafe(\\"font-size\\", fontSize)]),
    media(\\"(min-width: 320px) and (max-width: 320px)\\", [unsafe(\\"font-size\\", mediaFontSize),
hover([unsafe(\\"font-size\\", mediaHoverFontSize)])])]);
let getLabelStyleVariants = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode, ()) => {
    

switch (mode) {
    | (Some(Dark)) => []
    | (Some(Light)) => []
    | (Some(Semi)) => []
    | (None) => []
    }
  };

let getLabelVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\"\\"
    | (Some(Light)) => \\" _1imz7a4_0-1\\"
    | (Some(Semi)) => \\"\\"
    | (None) => \\"\\"
  }
};

let label = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode=?, ()) => {
  \\"_elo_text _1imz7a4\\" ++ getLabelVariants(~mode, ()) ++ \\" \\" ++ merge([labelStyle(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize), ...getLabelStyleVariants(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode, ())]);
}
",
  "RootStyleButton.elo.css": "._333se4 {
  background-color: red;
  padding-left: 10px;
  border: 0px
}

._333se4_0-0 {
  background-color: red
}

._333se4_0-0:hover {
  padding-left: 10px
}

._333se4_0-0_1-0 {
  background-color: blue
}

._333se4_1-1 {
  background-color: green
}",
  "RootStyleLabel.elo.css": "._1imz7a4:hover {
  color: red
}

._1imz7a4_0-1 {
  font-size: 16px
}

@media (min-width: 320px) and (max-width: 320px) {
  ._1imz7a4 {
    color: green
  }
}

@media (min-width: 320px) and (max-width: 320px) {
  ._1imz7a4:hover {
    color: blue
  }
}",
  "_reset.elo.css": "._elo_view{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;overflow:hidden;-webkit-overflow-scrolling:touch;align-self:stretch;flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-shrink:0;max-width:100%;box-sizing:border-box}._elo_text{display:inline;overflow:visible}",
}
`;

exports[`Compiling to ReasonML should return a map of files in devMode 1`] = `
Object {
  "RootStyle.re": "open Css;
[%bs.raw {|
  require(\\"./RootStyleButton.elo.css\\")
|}];

[%bs.raw {|
  require(\\"./RootStyleLabel.elo.css\\")
|}];

[%bs.raw{|
  require(\\"./_reset.elo.css\\")
|}];

[@bs.deriving jsConverter]
type type_ =
  | Primary
  | Secondary;

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light
  | Semi;

let buttonStyle = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft) => style([unsafe(\\"border-width\\", borderWidth)]);
let getButtonStyleVariants = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_, ~mode, ()) => {
    let buttonStylePrimary = style([unsafe(\\"padding-left\\", paddingLeft),
      hover([unsafe(\\"padding-right\\", paddingRight)])]);
    let buttonStylePrimaryDark = style([unsafe(\\"padding-left\\", padLeft)]);

switch (type_, mode) {
    | (Some(Primary), Some(Dark)) => [buttonStylePrimary,buttonStylePrimaryDark]
    | (Some(Primary), Some(Light)) => [buttonStylePrimary]
    | (Some(Primary), Some(Semi)) => [buttonStylePrimary]
    | (Some(Primary), None) => [buttonStylePrimary]
    | (Some(Secondary), Some(Dark)) => []
    | (Some(Secondary), Some(Light)) => []
    | (Some(Secondary), Some(Semi)) => []
    | (Some(Secondary), None) => []
    | (None, Some(Dark)) => []
    | (None, Some(Light)) => []
    | (None, Some(Semi)) => []
    | (None, None) => []
    }
  };

let getButtonVariants = (~type_, ~mode, ()) => {
  switch (type_, mode) {
    | (Some(Primary), Some(Dark)) => \\" Button_333se4__Type_-Primary Button_333se4__Mode-Dark Button_333se4__Type_-Primary__Mode-Dark\\"
    | (Some(Primary), Some(Light)) => \\" Button_333se4__Type_-Primary Button_333se4__Mode-Light Button_333se4__Type_-Primary__Mode-Light\\"
    | (Some(Primary), Some(Semi)) => \\" Button_333se4__Type_-Primary Button_333se4__Mode-Semi Button_333se4__Type_-Primary__Mode-Semi\\"
    | (Some(Primary), None) => \\" Button_333se4__Type_-Primary\\"
    | (Some(Secondary), Some(Dark)) => \\" Button_333se4__Type_-Secondary Button_333se4__Mode-Dark Button_333se4__Type_-Secondary__Mode-Dark\\"
    | (Some(Secondary), Some(Light)) => \\" Button_333se4__Type_-Secondary Button_333se4__Mode-Light Button_333se4__Type_-Secondary__Mode-Light\\"
    | (Some(Secondary), Some(Semi)) => \\"\\"
    | (Some(Secondary), None) => \\" Button_333se4__Type_-Secondary\\"
    | (None, Some(Dark)) => \\" Button_333se4__Mode-Dark\\"
    | (None, Some(Light)) => \\" Button_333se4__Mode-Light\\"
    | (None, Some(Semi)) => \\" Button_333se4__Mode-Semi\\"
    | (None, None) => \\"\\"
  }
};

let button = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_=?, ~mode=?, ()) => {
  \\"_elo_view Button_333se4\\" ++ getButtonVariants(~type_, ~mode, ()) ++ \\" \\" ++ merge([buttonStyle(~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft), ...getButtonStyleVariants(~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_, ~mode, ())]);
}

let labelStyle = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize) => style([unsafe(\\"line-height\\", lineHeight),
    hover([unsafe(\\"font-size\\", fontSize)]),
    media(\\"(min-width: 320px) and (max-width: 320px)\\", [unsafe(\\"font-size\\", mediaFontSize),
hover([unsafe(\\"font-size\\", mediaHoverFontSize)])])]);
let getLabelStyleVariants = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode, ()) => {
    

switch (mode) {
    | (Some(Dark)) => []
    | (Some(Light)) => []
    | (Some(Semi)) => []
    | (None) => []
    }
  };

let getLabelVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\"\\"
    | (Some(Light)) => \\" Label_1imz7a4__Mode-Light\\"
    | (Some(Semi)) => \\"\\"
    | (None) => \\"\\"
  }
};

let label = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode=?, ()) => {
  \\"_elo_text Label_1imz7a4\\" ++ getLabelVariants(~mode, ()) ++ \\" \\" ++ merge([labelStyle(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize), ...getLabelStyleVariants(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode, ())]);
}
",
  "RootStyleButton.elo.css": ".Button_333se4 {
  background-color: red;
  padding-left: 10px;
  border: 0px
}

.Button_333se4__Type_-Primary {
  background-color: red
}

.Button_333se4__Type_-Primary:hover {
  padding-left: 10px
}

.Button_333se4__Type_-Primary__Mode-Dark {
  background-color: blue
}

.Button_333se4__Mode-Light {
  background-color: green
}",
  "RootStyleLabel.elo.css": ".Label_1imz7a4:hover {
  color: red
}

.Label_1imz7a4__Mode-Light {
  font-size: 16px
}

@media (min-width: 320px) and (max-width: 320px) {
  .Label_1imz7a4 {
    color: green
  }
}

@media (min-width: 320px) and (max-width: 320px) {
  .Label_1imz7a4:hover {
    color: blue
  }
}",
  "_reset.elo.css": "._elo_view{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;overflow:hidden;-webkit-overflow-scrolling:touch;align-self:stretch;flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-shrink:0;max-width:100%;box-sizing:border-box}._elo_text{display:inline;overflow:visible}",
}
`;

exports[`Compiling to ReasonML should return a map of files using dynamic imports 1`] = `
Object {
  "RootStyle.re": "open Css;
[%bs.raw{|
  require(\\"./_reset.elo.css\\")
|}];

[@bs.deriving jsConverter]
type type_ =
  | Primary
  | Secondary;

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light
  | Semi;

let buttonStyle = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft) => style([unsafe(\\"border-width\\", borderWidth)]);
let getButtonStyleVariants = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_, ~mode, ()) => {
    let buttonStylePrimary = style([unsafe(\\"padding-left\\", paddingLeft),
      hover([unsafe(\\"padding-right\\", paddingRight)])]);
    let buttonStylePrimaryDark = style([unsafe(\\"padding-left\\", padLeft)]);

switch (type_, mode) {
    | (Some(Primary), Some(Dark)) => [buttonStylePrimary,buttonStylePrimaryDark]
    | (Some(Primary), Some(Light)) => [buttonStylePrimary]
    | (Some(Primary), Some(Semi)) => [buttonStylePrimary]
    | (Some(Primary), None) => [buttonStylePrimary]
    | (Some(Secondary), Some(Dark)) => []
    | (Some(Secondary), Some(Light)) => []
    | (Some(Secondary), Some(Semi)) => []
    | (Some(Secondary), None) => []
    | (None, Some(Dark)) => []
    | (None, Some(Light)) => []
    | (None, Some(Semi)) => []
    | (None, None) => []
    }
  };

let getButtonVariants = (~type_, ~mode, ()) => {
  switch (type_, mode) {
    | (Some(Primary), Some(Dark)) => \\" _333se4_0-0 _333se4_1-0 _333se4_0-0_1-0\\"
    | (Some(Primary), Some(Light)) => \\" _333se4_0-0 _333se4_1-1 _333se4_0-0_1-1\\"
    | (Some(Primary), Some(Semi)) => \\" _333se4_0-0 _333se4_1-2 _333se4_0-0_1-2\\"
    | (Some(Primary), None) => \\" _333se4_0-0\\"
    | (Some(Secondary), Some(Dark)) => \\" _333se4_0-1 _333se4_1-0 _333se4_0-1_1-0\\"
    | (Some(Secondary), Some(Light)) => \\" _333se4_0-1 _333se4_1-1 _333se4_0-1_1-1\\"
    | (Some(Secondary), Some(Semi)) => \\"\\"
    | (Some(Secondary), None) => \\" _333se4_0-1\\"
    | (None, Some(Dark)) => \\" _333se4_1-0\\"
    | (None, Some(Light)) => \\" _333se4_1-1\\"
    | (None, Some(Semi)) => \\" _333se4_1-2\\"
    | (None, None) => \\"\\"
  }
};

let button = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_=?, ~mode=?, ()) => {
  [%bs.raw {| import(\\"./RootStyleButton.elo.css\\") |}];
  \\"_elo_view _333se4\\" ++ getButtonVariants(~type_, ~mode, ()) ++ \\" \\" ++ merge([buttonStyle(~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft), ...getButtonStyleVariants(~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_, ~mode, ())]);
}

let labelStyle = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize) => style([unsafe(\\"line-height\\", lineHeight),
    hover([unsafe(\\"font-size\\", fontSize)]),
    media(\\"(min-width: 320px) and (max-width: 320px)\\", [unsafe(\\"font-size\\", mediaFontSize),
hover([unsafe(\\"font-size\\", mediaHoverFontSize)])])]);
let getLabelStyleVariants = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode, ()) => {
    

switch (mode) {
    | (Some(Dark)) => []
    | (Some(Light)) => []
    | (Some(Semi)) => []
    | (None) => []
    }
  };

let getLabelVariants = (~mode, ()) => {
  switch (mode) {
    | (Some(Dark)) => \\"\\"
    | (Some(Light)) => \\" _1imz7a4_0-1\\"
    | (Some(Semi)) => \\"\\"
    | (None) => \\"\\"
  }
};

let label = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode=?, ()) => {
  [%bs.raw {| import(\\"./RootStyleLabel.elo.css\\") |}];
  \\"_elo_text _1imz7a4\\" ++ getLabelVariants(~mode, ()) ++ \\" \\" ++ merge([labelStyle(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize), ...getLabelStyleVariants(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode, ())]);
}
",
  "RootStyleButton.elo.css": "._333se4 {
  background-color: red;
  padding-left: 10px;
  border: 0px
}

._333se4_0-0 {
  background-color: red
}

._333se4_0-0:hover {
  padding-left: 10px
}

._333se4_0-0_1-0 {
  background-color: blue
}

._333se4_1-1 {
  background-color: green
}",
  "RootStyleLabel.elo.css": "._1imz7a4:hover {
  color: red
}

._1imz7a4_0-1 {
  font-size: 16px
}

@media (min-width: 320px) and (max-width: 320px) {
  ._1imz7a4 {
    color: green
  }
}

@media (min-width: 320px) and (max-width: 320px) {
  ._1imz7a4:hover {
    color: blue
  }
}",
  "_reset.elo.css": "._elo_view{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;overflow:hidden;-webkit-overflow-scrolling:touch;align-self:stretch;flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-shrink:0;max-width:100%;box-sizing:border-box}._elo_text{display:inline;overflow:visible}",
}
`;

exports[`Compiling to ReasonML should return no css files 1`] = `
Object {
  "RootStyle.re": "open Css;


[%bs.raw{|
  require(\\"./_reset.elo.css\\")
|}];

[@bs.deriving jsConverter]
type type_ =
  | Primary
  | Secondary;

[@bs.deriving jsConverter]
type mode =
  | Dark
  | Light
  | Semi;

let buttonStyle = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft) => style([unsafe(\\"background-color\\", \\"red\\"),
    unsafe(\\"padding-left\\", \\"10px\\"),
    unsafe(\\"border\\", \\"0px\\"),
    unsafe(\\"border-width\\", borderWidth)]);
let getButtonStyleVariants = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_, ~mode, ()) => {
    let buttonStylePrimary = style([unsafe(\\"background-color\\", \\"red\\"),
      unsafe(\\"padding-left\\", paddingLeft),
      hover([unsafe(\\"padding-left\\", \\"10px\\"),
unsafe(\\"padding-right\\", paddingRight)])]);
    let buttonStylePrimaryDark = style([unsafe(\\"background-color\\", \\"blue\\"),
      unsafe(\\"padding-left\\", padLeft)]);
    let buttonStyleLight = style([unsafe(\\"background-color\\", \\"green\\")]);

switch (type_, mode) {
    | (Some(Primary), Some(Dark)) => [buttonStylePrimary,buttonStylePrimaryDark]
    | (Some(Primary), Some(Light)) => [buttonStylePrimary,buttonStyleLight]
    | (Some(Primary), Some(Semi)) => [buttonStylePrimary]
    | (Some(Primary), None) => [buttonStylePrimary]
    | (Some(Secondary), Some(Dark)) => []
    | (Some(Secondary), Some(Light)) => [buttonStyleLight]
    | (Some(Secondary), Some(Semi)) => []
    | (Some(Secondary), None) => []
    | (None, Some(Dark)) => []
    | (None, Some(Light)) => [buttonStyleLight]
    | (None, Some(Semi)) => []
    | (None, None) => []
    }
  };

let button = (~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_=?, ~mode=?, ()) => {
  \\"_elo_view\\" ++ \\" \\" ++ merge([buttonStyle(~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft), ...getButtonStyleVariants(~borderWidth, ~paddingLeft, ~paddingRight, ~padLeft, ~type_, ~mode, ())]);
}

let labelStyle = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize) => style([unsafe(\\"line-height\\", lineHeight),
    hover([unsafe(\\"color\\", \\"red\\"),
unsafe(\\"font-size\\", fontSize)]),
    media(\\"(min-width: 320px) and (max-width: 320px)\\", [unsafe(\\"color\\", \\"green\\"),
unsafe(\\"font-size\\", mediaFontSize),
hover([unsafe(\\"font-size\\", mediaHoverFontSize),
unsafe(\\"color\\", \\"blue\\")])])]);
let getLabelStyleVariants = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode, ()) => {
    let labelStyleLight = style([unsafe(\\"font-size\\", \\"16px\\")]);

switch (mode) {
    | (Some(Dark)) => []
    | (Some(Light)) => [labelStyleLight]
    | (Some(Semi)) => []
    | (None) => []
    }
  };

let label = (~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode=?, ()) => {
  \\"_elo_text\\" ++ \\" \\" ++ merge([labelStyle(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize), ...getLabelStyleVariants(~lineHeight, ~fontSize, ~mediaFontSize, ~mediaHoverFontSize, ~mode, ())]);
}
",
  "_reset.elo.css": "._elo_view{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;overflow:hidden;-webkit-overflow-scrolling:touch;align-self:stretch;flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-shrink:0;max-width:100%;box-sizing:border-box}._elo_text{display:inline;overflow:visible}",
}
`;
